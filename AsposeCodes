
//Get all field names and values
// Open document
Document pdfDocument = new Document("input.pdf");
// Get values from all fields
foreach (Field formField in pdfDocument.Form)
{
Console.WriteLine("Field Name : {0} ", formField.PartialName);
Console.WriteLine("Value : {0} ", formField.Value);
}

//Get all field names and 
// Load XFA form
Document doc = new Document("c:/source.pdf");
string[] names = doc.Form.XFA.FieldNames;
// Set field values
doc.Form.XFA[names[0]] = "Field 0";
doc.Form.XFA[names[1]] = "Field 1";
// Get field position
Console.WriteLine(doc.Form.XFA.GetFieldTemplate(names[0]).Attributes["x"].Value);
// Get field position
Console.WriteLine(doc.Form.XFA.GetFieldTemplate(names[0]).Attributes["y"].Value);
// Save the updated document
doc.Save("c:/Filled_XFA.pdf");


// Recursively iterate  to get all fields 
document contains checkboxes as grouped fields and you need to recursively look into all the children of the group fields. Please see the following sample code which will help you get your desired result. This code recursively iterate through all the children of the group fields and list down the fields in a list.

//open document
Document pdfDocument = new Document("E:\\AP Data\\Demo.Pdf");
 
foreach (Field formField in pdfDocument.Form)
{
    List<string> listFields = new List<string>();
    getField(formField, ref listFields);
  
}
 
 
 //  How to sign a pdf and get signature from a signed pdf
 string inFile = @"c:\test.pdf";
string outFile = @"c:\test.out.pdf";
using (Document document = new Document(inFile))
{
  using (PdfFileSignature signature = new PdfFileSignature(document))
  {
     PKCS7 pkcs = new PKCS7(@"c:\test.pfx", "WebSales"); // Use PKCS7/PKCS7Detached objects
     DocMDPSignature docMdpSignature = new DocMDPSignature(pkcs, DocMDPAccessPermissions.FillingInForms);
     System.Drawing.Rectangle rect = new System.Drawing.Rectangle(100, 100, 200, 100);
     //set signature appearance
     signature.SignatureAppearance = @"c:\asposelogo.jpg";
     //create any of the three signature types
     signature.Certify(1, "Signature Reason", "Contact", "Location", true, rect, docMdpSignature);
     //save output PDF file
     signature.Save(outFile);
  }
}

using (Document document = new Document(outFile))
{
   using (PdfFileSignature signature = new PdfFileSignature(document))
   {
      IList sigNames = signature.GetSignNames();
      if (sigNames.Count > 0) // Any signatures?
      {
          if (signature.VerifySigned(sigNames[0] as string)) // Verify first one
          {
              if (signature.IsCertified) // Certified?
              {
                  if (signature.GetAccessPermissions() == DocMDPAccessPermissions.FillingInForms) // Get access permission
                  {
                      // Do something
                  }
              }
          }
      }
   }
}

//method to check all the fields
public void getField(Field field,ref List<string> listFields)
{
  
    if (field.IsGroup)
    {
        foreach (Field childField in field)
        {
            getField(childField,ref listFields);
        }
    }
    else
    {
        listFields.Add(field.FullName);
    }
                            
}

// Concatenate multiple pdf files to a new pdf file
// Open the first document
Document pdfDocument1 = new Document("input.pdf");
// Open the second document
Document pdfDocument2 = new Document("input2.pdf");

// Add pages of second document to the first
pdfDocument1.Pages.Add(pdfDocument2.Pages);

// Save concatenated output file
pdfDocument1.Save("output.pdf");
